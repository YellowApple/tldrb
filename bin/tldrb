#!/usr/bin/env ruby

require 'bales'
require 'open-uri'
require 'colorize'
require 'json'
require 'fileutils'

module Tldrb; end

module Tldrb::Functions
  def get_page(query, platform)
    filepath = create_filepath(query, platform)
    return File.open(filepath).read if File.exist?(filepath)
    content = download_page(query, platform)
    save_to_cache(filepath, content)
    content
  rescue StandardError
    nil
  end

  def download_page(query, platform)
    url = "https://raw.github.com/tldr-pages/tldr/master/pages/" \
      "#{platform}/#{query}.md"
    open(url).read
  end

  def cache_dir
    folder = if ENV['XDG_CACHE_HOME']
               ENV['XDG_CACHE_HOME']
             else
               File.expand_path('~/.cache')
             end
    folder + '/tldr'
  end

  def create_filepath(command, platform)
    "#{cache_dir}/#{command}_#{platform}.md"
  end

  def save_to_cache(filepath, content)
    dir = cache_dir
    FileUtils.mkdir_p(dir) unless File.directory?(dir)
    file = File.new(filepath, 'w+')
    file.puts content
  end

  def remove_cache
    FileUtils.rm_r(cache_dir) if Dir.exist?(cache_dir)
  end

  def index_cache
    Dir["#{cache_dir}/*.md"].map { |f| File.basename(f, '.md').split('_') }
  end

  def my_platform
    platform = Gem::Platform.local.os
    # TODO: suggest upstream use of "darwin" instead of "osx", since
    # "darwin" is what is actually used by OS X internally"
    platform = 'osx' if platform == 'darwin'
    return platform
  end

  def supported_platforms
    sections_url = "https://api.github.com/repos/tldr-pages/tldr" \
      "/contents/pages/"
    api_response = open(sections_url).read
    pages = JSON.parse(api_response)

    platforms = pages.select { |page| page['type'] == 'dir' }
                .collect { |dirs| dirs['name'] }
                .delete_if { |dir| dir == 'common' }
    return platforms
  end

  def parse_page(page)
    page.each_line.map do |line|
      case line[0]
      when '#'
        next
      when '>'
        line.gsub(/>/, ' ').colorize(:blue)
      when '-'
        line.colorize(:green)
      when '`'
        line.gsub(/`/, ' ').colorize(:cyan)
      end
    end.join('')
  end
end

class Tldrb::Application < Bales::Application
  version "0.0.3"
  summary "tldr client in Ruby"
  description "Ruby client for tldr " \
              "(<https://github.com/tldr-pages/tldr>).  Implemented with " \
              "the Ruby on Bales command-line app framework " \
              "(<https://github.com/YellowApple/bales>)."

  # TODO: implement opt value checking in Bales
  option :platform,
         short_form: '-o',
         long_form: '--os',
         type: String,
         description: "Override the operating system [linux, osx, sunos]"

  action do |query, platform: nil|
    unless query.class == String
      Tldrb::Command::Help.run
      return
    end
    extend Tldrb::Functions

    platform = my_platform if platform.nil?

    result = get_page query, platform
    result = get_page query, 'common' if result.nil?

    if result.nil?
      puts "Couldn't find a tldr for '#{query}'."
    else
      puts parse_page(result)
    end
  end

  command 'remove_cache' do
    action do
      extend Tldrb::Functions
      puts 'Removing cache...'
      remove_cache
    end
  end

  command 'update' do
    action do
      extend Tldrb::Functions
      puts 'Indexing commands...'
      files = index_cache
      puts 'Removing cache...'
      remove_cache
      files.each do |f|
        p = download_page(*f)
        puts "Downloaded man page for: #{f[0]}"
        save_to_cache(create_filepath(*f), p)
      end
    end
  end

  # TODO: implement this in Bales
  command "version" do
    action do
      puts Tldrb::Application::VERSION
    end
  end

  parse_and_run
end
